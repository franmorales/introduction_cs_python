Complexity classes
O(1) denotes constant running time
O(log n) denotes logarithmic running time
O(n) denotes linear running time
O(n log n) denotes log-linear running time
O(n^c) denotes polynomial running time (C is a constant)
O(c^n) denotes exponential running time (c is a constant bein raised to a power based on size of input)

Constant complexity
  Independent of the inputs
  Very few interesting algorithms
  Can have loops or recursive calls, but number of iterations or calls independent of size of input

Logarithmic complexity
  complexity grows as log of size of one of its inputs
  example:
    Bisection search 
    Binary search of a list
    
        def intToStr(i):
          digits = '0123456789'
          if i == 0:
            return '0'
          result = ''
          while i>0:
            result = digits[i%10] + result
            i = i//10
          return result

Linear complexity
  Searching a list in sequence to see if an element is present
  Add characters of a string, assumed to be composed of decimal digits
  
        def addDigits(s):
          val = 0
          for c in s:
            val += int(c)
          return val
  
  O(len(s))
  Complexity can depend on number of recursive calls
  Number of times around loop is n
  Number of operations inside loop is a constant
  Overall just O(n)
  
Log-linear complexity
  Many practical algorithms are log-linear
  Very commonly used log-linear algorithm is merge sort
  Will return to this.
